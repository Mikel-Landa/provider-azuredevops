// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RepositoryFileInitParameters struct {

	// Git branch (defaults to refs/heads/master). The branch must already exist, it will not be created if it
	// does not already exist.
	// The branch name, defaults to "refs/heads/master"
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Commit message when adding or updating the managed file.
	// The commit message when creating or updating the file
	CommitMessage *string `json:"commitMessage,omitempty" tf:"commit_message,omitempty"`

	// The file content.
	// The file's content
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The path of the file to manage.
	// The file path to manage
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// Enable overwriting existing files (defaults to false).
	// Enable overwriting existing files, defaults to "false"
	OverwriteOnCreate *bool `json:"overwriteOnCreate,omitempty" tf:"overwrite_on_create,omitempty"`
}

type RepositoryFileObservation struct {

	// Git branch (defaults to refs/heads/master). The branch must already exist, it will not be created if it
	// does not already exist.
	// The branch name, defaults to "refs/heads/master"
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Commit message when adding or updating the managed file.
	// The commit message when creating or updating the file
	CommitMessage *string `json:"commitMessage,omitempty" tf:"commit_message,omitempty"`

	// The file content.
	// The file's content
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The path of the file to manage.
	// The file path to manage
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Enable overwriting existing files (defaults to false).
	// Enable overwriting existing files, defaults to "false"
	OverwriteOnCreate *bool `json:"overwriteOnCreate,omitempty" tf:"overwrite_on_create,omitempty"`

	// The ID of the Git repository.
	// The repository ID
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`
}

type RepositoryFileParameters struct {

	// Git branch (defaults to refs/heads/master). The branch must already exist, it will not be created if it
	// does not already exist.
	// The branch name, defaults to "refs/heads/master"
	// +kubebuilder:validation:Optional
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Commit message when adding or updating the managed file.
	// The commit message when creating or updating the file
	// +kubebuilder:validation:Optional
	CommitMessage *string `json:"commitMessage,omitempty" tf:"commit_message,omitempty"`

	// The file content.
	// The file's content
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The path of the file to manage.
	// The file path to manage
	// +kubebuilder:validation:Optional
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// Enable overwriting existing files (defaults to false).
	// Enable overwriting existing files, defaults to "false"
	// +kubebuilder:validation:Optional
	OverwriteOnCreate *bool `json:"overwriteOnCreate,omitempty" tf:"overwrite_on_create,omitempty"`

	// The ID of the Git repository.
	// The repository ID
	// +crossplane:generate:reference:type=github.com/Mikel-Landa/provider-azuredevops/apis/git/v1alpha1.Repository
	// +kubebuilder:validation:Optional
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// Reference to a Repository in git to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDRef *v1.Reference `json:"repositoryIdRef,omitempty" tf:"-"`

	// Selector for a Repository in git to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDSelector *v1.Selector `json:"repositoryIdSelector,omitempty" tf:"-"`
}

// RepositoryFileSpec defines the desired state of RepositoryFile
type RepositoryFileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepositoryFileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RepositoryFileInitParameters `json:"initProvider,omitempty"`
}

// RepositoryFileStatus defines the observed state of RepositoryFile.
type RepositoryFileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryFileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryFile is the Schema for the RepositoryFiles API. Manage files within an Azure DevOps Git repository.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type RepositoryFile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.content) || (has(self.initProvider) && has(self.initProvider.content))",message="spec.forProvider.content is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.file) || (has(self.initProvider) && has(self.initProvider.file))",message="spec.forProvider.file is a required parameter"
	Spec   RepositoryFileSpec   `json:"spec"`
	Status RepositoryFileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryFileList contains a list of RepositoryFiles
type RepositoryFileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RepositoryFile `json:"items"`
}

// Repository type metadata.
var (
	RepositoryFile_Kind             = "RepositoryFile"
	RepositoryFile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RepositoryFile_Kind}.String()
	RepositoryFile_KindAPIVersion   = RepositoryFile_Kind + "." + CRDGroupVersion.String()
	RepositoryFile_GroupVersionKind = CRDGroupVersion.WithKind(RepositoryFile_Kind)
)

func init() {
	SchemeBuilder.Register(&RepositoryFile{}, &RepositoryFileList{})
}
